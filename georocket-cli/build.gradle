apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'io.georocket.GeoRocketCli'

repositories {
    maven {
        url 'http://download.java.net/maven/2'
    }
    maven {
        // must come before mavenCentral() because it contains
        // the correct version of javax.media:jai_core
        url 'http://download.osgeo.org/webdav/geotools/'
    }
    mavenCentral()
}

dependencies {
    compile project(':georocket-client-api')
    
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-rx-java:$vertxVersion"
    
    compile 'commons-io:commons-io:2.4'
    compile 'de.undercouch:underline:1.0.0'
    compile 'net.time4j:time4j-core:4.7'
    compile 'org.apache.commons:commons-lang3:3.4'

    testCompile 'com.github.tomakehurst:wiremock:1.57'
    testCompile "io.vertx:vertx-unit:$vertxVersion"
    testCompile 'junit:junit:4.12'
    testCompile 'org.slf4j:slf4j-jcl:1.7.9'
}

task generateVersionFile << {
    def dstRes = new File(project.projectDir, 'src-gen/main/resources')
    def dst = new File(dstRes, 'io/georocket')
    dst.mkdirs()
    def versionFile = new File(dst, 'version.dat')
    versionFile.withWriter { w ->
        w << project.version
    }
}

task generateSources(dependsOn: generateVersionFile)

processResources.dependsOn(generateSources)
eclipseClasspath.dependsOn(generateSources)

task cleanGeneratedSources(type: Delete) {
    delete 'src-gen'
}

clean.dependsOn(cleanGeneratedSources)

// include generated sources
sourceSets.main.java.srcDirs 'src-gen/main/java'
sourceSets.main.resources.srcDirs 'src-gen/main/resources'

// customize start scripts
startScripts {
    // customize application name
    applicationName = 'georocket'
    
    // set GEOROCKET_CLI_HOME environment variable
    doLast {
        def windowsScriptFile = file(getWindowsScript())
        def unixScriptFile = file(getUnixScript())
        windowsScriptFile.text = windowsScriptFile.text
            .replaceFirst('set APP_HOME=.*', '$0\r\nset GEOROCKET_CLI_HOME=%APP_HOME%')
        unixScriptFile.text = unixScriptFile.text
            .replaceFirst('APP_HOME=.*', '$0\nexport GEOROCKET_CLI_HOME=\\$APP_HOME')
    }
}

distributions {
    main {
        contents {
            // include 'conf' directory in distribution
            from(projectDir) {
                include 'conf/**/*'
            }

            // include 'docs' in distribution
            from(tasks.getByPath(':docs:asciidoctor')) {
                into "docs"
                eachFile { f ->
                    f.path = f.path.replaceFirst(/html5\//, '')
                }
                includeEmptyDirs = false
            }
        }
    }
}
