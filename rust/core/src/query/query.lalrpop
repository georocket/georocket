use lalrpop_util::{ParseError};

use crate::index::Value;
use super::{and, bbox, eq, gt, gte, lt, lte, not, or, Logical, Query, QueryPart};
use super::unescape::{unescape_identifier, unescape_string};
use super::error::QueryParserError;

grammar;

extern {
    type Error = QueryParserError;
}

match {
    // keywords
    r"(?i)\sor\s|\|\|" => "||",
    r"(?i)\sand\s|&&" => "&&",
    r"(?i)bbox" => "BBOX()",
} else {
    r"[_\p{L}][_\p{L}\d-]*" => IDENT,
    r"-?(\d+|(\d+\.\d*)|(\d*\.\d+))([eE][+-]?\d*)?" => NUMBER,
    r"![=]{1,2}" => "!=",
    r"[=]{1,2}" => "==",
    r"!\s*\(" => "!(",
    r#""([^"\\]|\\.)*""# => STRING,
    r#"`([^`\\]|\\.)*`"# => QUOTED_IDENT,
    _
}

pub Query: Query = {
    <a:Or> => a.into(),
};

Or: QueryPart = {
    <l:Or> "||" <r:And> => {
        match l {
            QueryPart::Logical(Logical::Or(mut parts)) => {
                parts.push(r);
                QueryPart::Logical(Logical::Or(parts))
            }
            _ => or![l, r],
        }
    },
    And,
};

And: QueryPart = {
    <l:And> "&&" <r:Comparison> => {
        match l {
            QueryPart::Logical(Logical::And(mut parts)) => {
                parts.push(r);
                QueryPart::Logical(Logical::And(parts))
            }
            _ => and![l, r],
        }
    },
    Comparison,
};

Comparison: QueryPart = {
    <id:Identifier> "!=" <l:Literal> => not![eq![id, l]],
    <id:Identifier> "==" <l:Literal> => eq![id, l],
    <id:Identifier> ">=" <l:Literal> => gte![id, l],
    <id:Identifier> ">" <l:Literal> => gt![id, l],
    <id:Identifier> "<=" <l:Literal> => lte![id, l],
    <id:Identifier> "<" <l:Literal> => lt![id, l],
    BoundingBox,
    Logical,
};

BoundingBox: QueryPart = {
    "BBOX()" "(" <min_x:Float> "," <min_y:Float> "," <max_x:Float> "," <max_y:Float> ")" =>
        bbox![min_x, min_y, max_x, max_y],
};

Logical: QueryPart = {
    "!(" <qp:Or> ")" => QueryPart::Logical(Logical::Not(Box::new(qp))),
    "(" <qp:Or> ")" => qp,
    <l:Literal> => l.into(),
};

Literal: Value = {
    String,
    Number,
};

Identifier: String = {
    PlainIdentifier,
    QuotedIdentifier,
};

String: Value = {
    <start:@L> <s:STRING> =>? unescape_string(&s[1..s.len() - 1], start + 1).map(|s| s.into()),
};

QuotedIdentifier: String = {
    <start:@L> <s:QUOTED_IDENT> =>? unescape_identifier(&s[1..s.len() - 1], start + 1).map(|s| s.to_string()),
};

Number: Value = {
    <start:@L> <n:NUMBER> <end:@R> =>? {
        n.parse::<i64>()
            .map(|i| Value::from(i))
            .or_else(|_| n.parse::<f64>().map(|i| i.into()))
            .map_err(|e| ParseError::User {
                error: QueryParserError::InvalidNumber { start, end },
            })
    }
};

Float: f64 = {
    <start:@L> <n:NUMBER> <end:@R> =>? {
        n.parse::<f64>()
            .map(|i| i.into())
            .map_err(|e| ParseError::User {
                error: QueryParserError::InvalidNumber { start, end },
            })
    }
}

PlainIdentifier: String = {
    <i:IDENT> => i.to_string(),
};
