plugins {
    id "org.standardout.versioneye" version "1.4.0"
}

subprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'signing'
    
    version = '1.0.1-SNAPSHOT'
    group = 'io.georocket'

    ext {
        checkstyleConfigDir = new File(rootProject.projectDir, 'config/checkstyle')
    }

    plugins.withType(JavaPlugin) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'

        eclipse {
            jdt.file.withProperties { properties ->
                properties['org.eclipse.jdt.core.formatter.indentation.size'] = '2'
                properties['org.eclipse.jdt.core.formatter.tabulation.size'] = '2'
                properties['org.eclipse.jdt.core.formatter.tabulation.char'] = 'space'
                properties['org.eclipse.jdt.core.formatter.continuation_indentation'] = '1'
                properties['org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer'] = '1'
            }
        }

        plugins.withType(CheckstylePlugin) {
            checkstyle {
                toolVersion = "7.2"
                configFile new File(checkstyleConfigDir, 'checkstyle.xml')
                configProperties.checkstyleConfigDir = checkstyleConfigDir
            }
        }

        plugins.withType(MavenPlugin) {
            javadoc {
                // link to JRE6 documentation
                options.author true
                options.links 'http://download.oracle.com/javase/8/docs/api/'
                options.links 'http://vertx.io/docs/apidocs/'
            }
            
            // package javadoc into a jar file
            task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
                from javadoc.destinationDir
                classifier = 'javadoc'
            }

            // package source into a jar file
            task packageSources(type: Jar) {
                from sourceSets.main.allSource
                classifier = 'sources'
            }

            // define artifacts for upload
            artifacts {
                archives jar
                archives packageJavadoc
                archives packageSources
            }
            
            // remove test dependencies from configuration-to-scope mapping
            // this also removes them from the maven pom file
            conf2ScopeMappings.mappings.remove(configurations.testCompile)
        }
    }

    plugins.withType(MavenPlugin) {
        // sign all artifacts
        signing {
            required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask('uploadArchives') }
            sign configurations.archives
        }

        uploadArchives.repositories.mavenDeployer {
            // sign artifacts before upload
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            // upload to sonatype OSS
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: this.hasProperty('sonatypeUsername') ? sonatypeUsername : '',
                    password: this.hasProperty('sonatypePassword') ? sonatypePassword : '')
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: this.hasProperty('sonatypeUsername') ? sonatypeUsername : '',
                    password: this.hasProperty('sonatypePassword') ? sonatypePassword : '')
            }

            // ensure correct artifact ID
            pom.artifactId = project.name

            // pom file details
            pom.project {
                name 'georocket'
                packaging 'jar'
                description 'GeoRocket is a high-performance data store for geospatial files'
                url 'http://georocket.io'

                scm {
                    url 'scm:git:git://github.com/georocket/georocket.git'
                    connection 'scm:git:git://github.com/georocket/georocket.git'
                    developerConnection 'scm:git:git://github.com/georocket/georocket.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'michel-kraemer'
                        name 'Michel Kraemer'
                        email 'michel@undercouch.de'
                    }
                }
            }
        }
    }

    ext {
        vertxVersion = '3.3.3'
    }

    // print project version to console - used in CI
    task getVersion {
        doLast {
            println version
        }
    }
}

versioneye {
    includeSubProjects = true
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}
