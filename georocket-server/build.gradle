plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven'

mainClassName = 'io.georocket.GeoRocketKt'

repositories {
    mavenCentral()
    exclusiveContent {
        forRepository {
            maven {
                url 'https://repo.osgeo.org/repository/release/'
            }
        }
        filter {
            includeGroup "jgridshift"
            includeGroup "org.geotools"
        }
    }
}

configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

dependencies {
    compile project(':georocket-common')

    // include projects that announce themselves as extensions
    project.parent.allprojects.each {
        if (it.extensions.extraProperties.has('geoRocketServerExtension') &&
            it.extensions.extraProperties.get('geoRocketServerExtension')) {
            runtimeOnly it
        }
    }

    compile group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.25'
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'

    compile "io.vertx:vertx-lang-kotlin:$vertxVersion"
    compile "io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion"
    compile "io.vertx:vertx-service-discovery:$vertxVersion"
    compile "io.vertx:vertx-mongo-client:$vertxVersion"
    compile "io.vertx:vertx-web:$vertxVersion"
    compile "io.vertx:vertx-web-client:$vertxVersion"

    implementation 'software.amazon.awssdk:s3:2.15.75'
    compile 'com.fasterxml:aalto-xml:1.0.0'
    compile 'com.h2database:h2:1.4.196'
    compile 'com.vividsolutions:jts:1.13'
    compile 'commons-io:commons-io:2.6'
    implementation 'io.pebbletemplates:pebble:3.1.5'
    compile 'javax.servlet:javax.servlet-api:4.0.0'
    compile 'net.java.dev.jna:jna:4.5.1'
    compile 'org.apache.commons:commons-exec:1.3'
    compile 'org.apache.commons:commons-text:1.2'
    implementation 'org.apache.httpcomponents:httpcore:4.4.14'
    compile 'org.jooq:jool:0.9.12'
    compile 'org.yaml:snakeyaml:1.19'

    // mongodb driver + snappy compression
    compile 'org.mongodb:bson:3.6.1'
    compile 'org.mongodb:mongodb-driver-async:3.6.1'
    compile 'org.mongodb:mongodb-driver-reactivestreams:4.1.1'
    compile 'org.xerial.snappy:snappy-java:1.1.4'
    implementation 'io.projectreactor:reactor-core:3.4.2'

    // embedded mongodb for standalone mode
    implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:3.1.4'

    // necessary for ALPN / HTTP/2
    runtime "io.netty:netty-tcnative-boringssl-static:2.0.36.Final"

    compile "org.jetbrains.kotlin:kotlin-reflect"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.4.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactive:1.4.2'

    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.25.1'
    testImplementation 'org.mongodb:mongodb-driver:3.6.1'

    testImplementation "io.vertx:vertx-unit:$vertxVersion"
    testImplementation 'junit:junit:4.12'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.0'

    testImplementation "io.mockk:mockk:1.10.5"
    testImplementation "io.vertx:vertx-junit5:$vertxVersion"
    testImplementation "org.assertj:assertj-core:3.18.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.0"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.7.0"
    testImplementation "org.testcontainers:testcontainers:1.15.2"
    testImplementation "org.testcontainers:junit-jupiter:1.15.2"
}

// customize start scripts
startScripts {
    // customize application name
    applicationName = 'georocketd'

    // set GEOROCKET_HOME environment variable
    doLast {
        def windowsScriptFile = file(getWindowsScript())
        def unixScriptFile = file(getUnixScript())
        windowsScriptFile.text = windowsScriptFile.text
            .replaceFirst('set APP_HOME=.*', '$0\r\nset GEOROCKET_HOME=%APP_HOME%')
        unixScriptFile.text = unixScriptFile.text
            .replaceFirst('APP_HOME=.*', '$0\nexport GEOROCKET_HOME=\\$APP_HOME')
    }
}

distributions {
    main {
        contents {
            // include 'conf' directory in distribution
            from(projectDir) {
                include 'conf/**/*'
            }

            // include 'docs' in distribution
            from(tasks.getByPath(':docs:asciidoctor')) {
                into "docs"
                eachFile { f ->
                    f.path = f.path.replaceFirst(/html5\//, '')
                }
                includeEmptyDirs = false
            }
        }
    }
}

// do not upload ZIP and TAR distributions to Maven repo
configurations.archives.with {
    artifacts.removeAll { it.file =~ 'tar' }
    artifacts.removeAll { it.file =~ 'zip' }
}

// Fix command-length issue in windows startscript
// see https://issues.gradle.org/browse/GRADLE-2992
task pathingJar(type: Jar) {
    appendix = 'pathing'
    manifest { attributes("Class-Path": configurations.runtime.collect { it.getName() }.join(' ') + ' ' + jar.archiveName ) }
}
applicationDistribution.from(pathingJar) { into "lib" }
startScripts {
    doLast {
        def winScriptFile  = file getWindowsScript()
        def winFileText = winScriptFile.text

        // Remove too-long-classpath and use pathing jar instead
        winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem CLASSPATH declaration removed.')
        winFileText = winFileText.replaceAll('("%JAVA_EXE%" .* -classpath ")%CLASSPATH%(" .*)', '$1%APP_HOME%\\\\lib\\\\' + pathingJar.archiveName + '$2')

        winScriptFile.text = winFileText
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
