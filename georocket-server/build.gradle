plugins {
    id "de.undercouch.download" version "3.1.1"
}

apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'de.undercouch.download'

import de.undercouch.gradle.tasks.download.Download

mainClassName = 'io.georocket.GeoRocket'

repositories {
    jcenter()
    maven {
        url 'http://download.osgeo.org/webdav/geotools/'
    }
}

configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

dependencies {
    compile project(':georocket-server-api')

    compile group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.21'
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.21'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'

    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.7'

    compile "io.vertx:vertx-rx-java:$vertxVersion"
    compile "io.vertx:vertx-web:$vertxVersion"

    compile 'com.amazonaws:aws-java-sdk-s3:1.11.22'
    compile 'com.fasterxml:aalto-xml:0.9.11'
    compile 'com.google.guava:guava:19.0'
    compile 'com.vividsolutions:jts:1.13'
    compile 'commons-io:commons-io:2.5'
    compile 'net.java.dev.jna:jna:4.2.2'
    compile 'org.apache.commons:commons-exec:1.3'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile('org.apache.hadoop:hadoop-common:2.7.2') {
        // exclude netty because we want to use the version Vert.x depends on
        exclude group: 'io.netty'
    }
    compile('org.apache.hadoop:hadoop-hdfs:2.7.2') {
        // exclude netty because we want to use the version Vert.x depends on
        exclude group: 'io.netty'
    }
    compile 'org.apache.tika:tika-core:1.13'
    compile 'org.jooq:jool:0.9.11'
    compile 'org.mongodb:bson:3.3.0'
    compile 'org.mongodb:mongodb-driver-async:3.3.0'
    compile 'org.yaml:snakeyaml:1.17'

    compile('org.geotools:gt-epsg-extension:14.0') {
        // exclude invalid dependency
        exclude group: 'javax.media', module: 'jai_core'
    }
    compile('org.geotools:gt-epsg-hsql:14.0') {
        // exclude invalid dependency
        exclude group: 'javax.media', module: 'jai_core'
    }
    compile('org.geotools:gt-referencing:14.0') {
        // exclude invalid dependency
        exclude group: 'javax.media', module: 'jai_core'
    }
    // replace invalid jai_core dependency by a valid one
    compile 'javax.media.jai:com.springsource.javax.media.jai.core:1.1.3'

    testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.5'
    testCompile 'com.github.tomakehurst:wiremock:1.57'
    testCompile "io.vertx:vertx-unit:$vertxVersion"
    testCompile 'junit:junit:4.12'
    testCompile 'org.mongodb:mongodb-driver:3.3.0'

    antlr 'org.antlr:antlr4:4.5.3'
}

ext {
    elasticsearchUrl = new File(sourceSets.main.resources.srcDirs.first(),
        "elasticsearch_download_url.txt").text
    elasticsearchArchiveName = new File(new URL(elasticsearchUrl).path).name
    elasticsearchVersion = new File(new URL(elasticsearchUrl).path).parentFile.name
    elasticsearchInstallDir = new File(projectDir, "elasticsearch/" + elasticsearchVersion)
}

// customize start scripts
startScripts {
    // customize application name
    applicationName = 'georocketd'

    // set GEOROCKET_HOME environment variable
    doLast {
        def windowsScriptFile = file(getWindowsScript())
        def unixScriptFile = file(getUnixScript())
        windowsScriptFile.text = windowsScriptFile.text
            .replaceFirst('set APP_HOME=.*', '$0\r\nset GEOROCKET_HOME=%APP_HOME%')
        unixScriptFile.text = unixScriptFile.text
            .replaceFirst('APP_HOME=.*', '$0\nexport GEOROCKET_HOME=\\$APP_HOME')
    }
}

distributions {
    main {
        contents {
            // include 'conf' directory in distribution
            from(projectDir) {
                include 'conf/**/*'
            }

            // include 'docs' in distribution
            from(tasks.getByPath(':docs:asciidoctor')) {
                into "docs"
                eachFile { f ->
                    f.path = f.path.replaceFirst(/html5\//, '')
                }
                includeEmptyDirs = false
            }

            // include Elasticsearch
            from(elasticsearchInstallDir.parent) {
                into 'elasticsearch'
            }
        }
    }
}

/**
 * Download Elasticsearch to the build directory
 */
task downloadElasticsearch << {
    // if the destination file does not exist yet, download Elasticsearch
    // to a temporary file and then rename it
    def destFile = new File(buildDir, elasticsearchArchiveName)
    if (!destFile.exists()) {
        def tempFile = new File(buildDir, "${elasticsearchArchiveName}.part")
        download {
            src elasticsearchUrl
            dest tempFile
            overwrite true
        }
        tempFile.renameTo(destFile)
    }
}

/**
 * Extract Elasticsearch to the project directory
 */
task extractElasticsearch(dependsOn: downloadElasticsearch, type: Copy) {
    from zipTree(new File(buildDir, elasticsearchArchiveName))
    into elasticsearchInstallDir
    includeEmptyDirs = false
    eachFile { f ->
        f.path = f.path.replaceFirst(/.+?\//, '')
    }
}

task generateVersionFile << {
    def dstRes = new File(project.projectDir, 'src-gen/main/resources')
    def dst = new File(dstRes, 'io/georocket')
    dst.mkdirs()
    def versionFile = new File(dst, 'version.dat')
    versionFile.withWriter { w ->
        w << project.version
    }
}

task generateSources(dependsOn: generateVersionFile)

task cleanGeneratedSources(type: Delete) {
    delete 'src-gen'
}

processResources.dependsOn(extractElasticsearch)
processResources.dependsOn(generateSources)

eclipseClasspath.dependsOn(extractElasticsearch)
eclipseClasspath.dependsOn(generateGrammarSource)
eclipseClasspath.dependsOn(generateSources)

ideaModule.dependsOn(generateSources)

clean.dependsOn(cleanGeneratedSources)

// include generated sources
sourceSets.main.java.srcDirs 'src-gen/main/java'
sourceSets.main.resources.srcDirs 'src-gen/main/resources'

// Fix command-length issue in windows startscript
// see https://issues.gradle.org/browse/GRADLE-2992
task pathingJar(type: Jar) {
    appendix = 'pathing'
    manifest { attributes("Class-Path": configurations.runtime.collect { it.getName() }.join(' ') + ' ' + jar.archiveName ) }
}
applicationDistribution.from(pathingJar) { into "lib" }
startScripts {
    doLast {
        def winScriptFile  = file getWindowsScript()
        def winFileText = winScriptFile.text

        // Remove too-long-classpath and use pathing jar instead
        winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem CLASSPATH declaration removed.')
        winFileText = winFileText.replaceAll('("%JAVA_EXE%" .* -classpath ")%CLASSPATH%(" .*)', '$1%APP_HOME%\\\\lib\\\\' + pathingJar.archiveName + '$2')

        winScriptFile.text = winFileText
    }
}
