apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'application'
apply plugin: 'maven'

mainClassName = 'io.georocket.GeoRocket'

repositories {
    maven {
        url 'http://download.java.net/maven/2'
    }
    maven {
        // must come before mavenCentral() because it contains
        // the correct version of javax.media:jai_core
        url 'http://download.osgeo.org/webdav/geotools/'
    }
    mavenCentral()
}

dependencies {
    compile project(':georocket-server-api')

    compile "io.vertx:vertx-rx-java:$vertxVersion"
    compile "io.vertx:vertx-web:$vertxVersion"
    
    compile 'com.amazonaws:aws-java-sdk-s3:1.10.46'
    compile 'com.fasterxml:aalto-xml:0.9.11'
    compile 'com.google.guava:guava:18.0'
    compile 'com.vividsolutions:jts:1.12'
    compile 'commons-io:commons-io:2.4'
    compile 'javax.media:jai_core:1.1.3'
    compile 'net.java.dev.jna:jna:4.2.0'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.hadoop:hadoop-common:2.7.1'
    compile 'org.apache.hadoop:hadoop-hdfs:2.7.1'
    compile 'org.geotools:gt-epsg-extension:14.0'
    compile 'org.geotools:gt-epsg-hsql:14.0'
    compile 'org.geotools:gt-referencing:14.0'
    compile 'org.mongodb:bson:3.2.1'
    compile 'org.mongodb:mongodb-driver:3.2.1'
    compile 'org.yaml:snakeyaml:1.16'

    testCompile 'com.github.tomakehurst:wiremock:1.57'
    testCompile "de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.2"
    testCompile "io.vertx:vertx-unit:$vertxVersion"
    testCompile 'junit:junit:4.12'
    
    antlr 'org.antlr:antlr4:4.5.1'
}

// customize start scripts
startScripts {
    // customize application name
    applicationName = 'georocketd'
    
    // set GEOROCKET_HOME environment variable
    doLast {
        def windowsScriptFile = file(getWindowsScript())
        def unixScriptFile = file(getUnixScript())
        windowsScriptFile.text = windowsScriptFile.text
            .replaceFirst('set APP_HOME=.*', '$0\r\nset GEOROCKET_HOME=%APP_HOME%')
        unixScriptFile.text = unixScriptFile.text
            .replaceFirst('APP_HOME=.*', '$0\nexport GEOROCKET_HOME=\\$APP_HOME')
    }
}

distributions {
    main {
        contents {
            // include 'conf' directory in distribution
            from(projectDir) {
                include 'conf/**/*'
            }

            // include 'docs' in distribution
            from(tasks.getByPath(':docs:asciidoctor')) {
                into "docs"
                eachFile { f ->
                    f.path = f.path.replaceFirst(/html5\//, '')
                }
                includeEmptyDirs = false
            }
        }
    }
}

eclipseClasspath.dependsOn(generateGrammarSource)

// Fix command-length issue in windows startscript
// see https://issues.gradle.org/browse/GRADLE-2992
task pathingJar(type: Jar) {
    appendix = 'pathing'
    manifest { attributes("Class-Path": configurations.runtime.collect { it.getName() }.join(' ') + ' ' + jar.archiveName ) }
}
applicationDistribution.from(pathingJar) { into "lib" }
startScripts {
    doLast {
        def winScriptFile  = file getWindowsScript()
        def winFileText = winScriptFile.text

        // Remove too-long-classpath and use pathing jar instead
        winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem CLASSPATH declaration removed.')
        winFileText = winFileText.replaceAll('("%JAVA_EXE%" .* -classpath ")%CLASSPATH%(" .*)', '$1%APP_HOME%\\\\lib\\\\' + pathingJar.archiveName + '$2')

        winScriptFile.text = winFileText
    }
}
