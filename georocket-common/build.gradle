plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
}

apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'maven'

repositories {
    mavenCentral()
    exclusiveContent {
        forRepository {
            maven {
                url 'https://repo.osgeo.org/repository/release/'
            }
        }
        filter {
            includeGroup "jgridshift"
            includeGroup "org.geotools"
        }
    }
}

dependencies {
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-lang-kotlin:$vertxVersion"
    compile "io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion"

    compile 'com.fasterxml:aalto-xml:1.0.0'
    compile 'com.google.guava:guava:23.6-jre'
    compile 'de.undercouch:actson:1.2.0'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'org.apache.commons:commons-text:1.3'

    compile('org.geotools:gt-epsg-extension:19.1') {
        // exclude invalid dependency
        exclude group: 'javax.media', module: 'jai_core'
    }
    compile('org.geotools:gt-epsg-hsql:19.1') {
        // exclude invalid dependency
        exclude group: 'javax.media', module: 'jai_core'
    }
    compile('org.geotools:gt-referencing:19.1') {
        // exclude invalid dependency
        exclude group: 'javax.media', module: 'jai_core'
    }

    testCompile 'junit:junit:4.12'
    testCompile "io.vertx:vertx-unit:$vertxVersion"

    antlr 'org.antlr:antlr4:4.5.3'
}

task generateVersionFile {
    doLast {
        def dst = new File(project.buildDir, 'generated-src/main/resources/io/georocket')
        dst.mkdirs()
        def versionFile = new File(dst, 'version.dat')
        versionFile.withWriter { w ->
            w << project.version
        }
    }
}

task generateSources(dependsOn: generateVersionFile)

processResources.dependsOn(generateSources)

// include generated sources
sourceSets.main.java.srcDirs "$buildDir/generated-src/main/java"
sourceSets.main.resources.srcDirs "$buildDir/generated-src/main/resources"
